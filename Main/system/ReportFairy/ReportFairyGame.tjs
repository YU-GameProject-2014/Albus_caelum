/*
 *レポートの妖精ゲーム本体
 */
class ReportFairyGame{
    var mainLayer;
    var reportUnit;
    var fairyUnit;
    var frameUnit;
    var lifebarUnit;
    var scoreUnit;
    
    var report; 
    var lifebar;
    var score;
    
    
    var fairyManager; //FairyManager
    var fairies; //array;
    var maxFairyNum;
 
    var crazy = false;
 
    //var _score;
    var _life;
    var _maxlife;
    
    property life
    {
        setter(_life){
            this.lifebar.life = _life;
        }
        
        getter(){
            return _life;
        }
    }

    property maxlife
    {
        setter(_maxlife){
            this.lifebar.maxlife = _maxlife;
        }
        
        getter(){
            return _maxlife;
        }
    }
    
    function ReportFairyGame(wnd, lay){
        this.mainLayer  = RFGLayerCreator.createMainLayer(wnd, lay, this);
        this.report = new RFGReport(wnd, this.mainLayer, this);
        this.reportUnit = this.report.lay;
        this.fairyUnit = RFGLayerCreator.createFairyUnitLayer(wnd, this.mainLayer);
        this.frameUnit = RFGLayerCreator.createFrameLayer(wnd, this.mainLayer);
        this.lifebar = new RFGLifebar(wnd, this.mainLayer);
        this.lifebarUnit = this.lifebar.lay;
        this.score = new RFGScore(wnd, this.mainLayer);
        this.scoreUnit = this.score.lay;
        
        this.fairyUnit.bringToFront();
        this.frameUnit.bringToFront();
        this.lifebarUnit.bringToFront();
        this.scoreUnit.bringToFront();
        
        this.fairyManager = new RFGFairyManeger(wnd, this.fairyUnit, this);

        this.maxlife = this.life = 100;//初期ライフ
        this.score.score = 10;//枚数
        
    }
    
    //集中モード切替
    function togleCrazyMode(){
        if (this.crazy === true) {
            this.frameUnit.visible=false;
            this.report.speed = 2;
            this.crazy = false;
        } else {
            this.frameUnit.visible=true;
            this.report.speed = 20;
            this.crazy = true;
        }
    }

    
    
    /*
     * キー操作はReportFairyが一元管理します
     */
    function onKeyDown(key, shift, process=true){
        switch(key){
        case VK_Z:
            break;
 
        case VK_X:
            this.fairyManager.stopAll();
            break;
 
        }
    }

    function onKeyUp(key, shift, process=true){
        switch(key){
        case VK_Z:
            this.togleCrazyMode();
            break;
        case VK_ESCAPE:
            invalidate this;
            break;
        case VK_X:
            this.fairyManager.startAll();
            break;
        case VK_C:
            this.fairyManager.killAll();
            break;
        }
    }
    
    //弟子に相談される
    function consult(obj){
        //妖精オブジェクトからの相談
        if (obj instanceof "RFGFairy") {
            //衝突したと指示
            if (this.isCollision(obj, this.report)) {
                //ライフ計算
                this.lifebar.life--;
                this.lifebar.update();

                return true;
            }
        }
    }
    
    //オブジェクト同士の接触判定
    function isCollision(obj1, obj2){
        var lay1;
        var lay2;
        var pos;
        
        for(var i = 0; i < obj1.lay.collisionLayers.count; i++)
        {
            for(var j = 0; j < obj2.lay.collisionLayers.count; j++)
            {
                lay1 = obj1.lay.collisionLayers[i];
                lay2 = obj2.lay.collisionLayers[j];
                
                
                //サイズが不正なレイヤーの処理はしない
                if(lay1.width <= 0 || lay1.height <= 0 || lay2.width <= 0 || lay2.height <= 0) continue;
            
                
                pos = new Array();
                pos.add(%[]);
                pos.add(%[]);
                
                //親レイヤーからはみ出してる部分を無視
                pos[0]["left"]   = 0 < lay1.left ? lay1.boundingLeft : lay1.boundingParentLeft;
                pos[0]["right"]  = lay1.left + lay1.width < lay1.parent.width ? lay1.boundingLeft + lay1.width : lay1.boundingParentLeft + lay1.parent.width;
                pos[0]["top"]    = 0 < lay1.top ? lay1.boundingTop : lay1.boundingParentTop;
                pos[0]["bottom"] = lay1.top + lay1.height < lay1.parent.height ? lay1.boundingTop + lay1.height : lay1.boundingParentTop + lay1.parent.height;

                pos[1]["left"]   = 0 < lay2.left ? lay2.boundingLeft : lay2.boundingParentLeft;
                pos[1]["right"]  = lay2.left + lay2.width < lay2.parent.width ? lay2.boundingLeft + lay2.width : lay2.boundingParentLeft + lay2.parent.width;
                pos[1]["top"]    = 0 < lay2.top ? lay2.boundingTop : lay2.boundingParentTop;
                pos[1]["bottom"] = lay2.top + lay2.height < lay2.parent.height ? lay2.boundingTop + lay2.height : lay2.boundingParentTop + lay2.parent.height;

                //衝突判定
                if( (pos[0]["left"] < pos[1]["right"] ) &&
                    (pos[1]["left"] < pos[0]["right"] ) &&
                    (pos[0]["top"]  < pos[1]["bottom"]) &&
                    (pos[1]["top"]  < pos[0]["bottom"]) ) {

    
                    return true;
                }
            }
        }
    }
    
    function writedReport(){
        this.score.score--;
    }
    
    function finalize(){
        invalidate this.fairyManager;
        invalidate this.fairyUnit;
        invalidate this.frameUnit;
        invalidate this.mainLayer;
        invalidate this.report;
        invalidate this.lifebar;
        invalidate this.score;

        kag.trigger("fairyend");
    }
}
