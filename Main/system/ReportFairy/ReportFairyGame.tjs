/*
 *レポートの妖精ゲーム本体
 */
class ReportFairyGame{
    var mainLayer;
    var reportUnit;
    var fairyUnit;
    var frameUnit;
    
    var report; 
    
    var fairyManager; //FairyManager
    var fairies; //array;
    var maxFairyNum;
 
    var crazy = false;
 
    var score;
    
    function ReportFairyGame(wnd, lay){
        this.mainLayer  = RFGLayerCreator.createMainLayer(wnd, lay, this);
        this.report = new RFGReport(wnd, this.mainLayer);
        this.reportUnit = this.report.reportLayer;
        this.fairyUnit = RFGLayerCreator.createFairyUnitLayer(wnd, this.mainLayer);
        this.frameUnit = RFGLayerCreator.createFrameLayer(wnd, this.mainLayer);
        
        this.fairyUnit.bringToFront();
        this.frameUnit.bringToFront();
        
        this.fairyManager = new RFGFairyManeger(wnd, this.fairyUnit, this);
    }
    

    function togleCrazyMode(){
        if (this.crazy === true) {
            this.frameUnit.visible=false;
            this.report.speed = 2;
            this.crazy = false;
        } else {
            this.frameUnit.visible=true;
            this.report.speed = 20;
            this.crazy = true;
        }
    }

    
    
    /*
     * キー操作はReportFairyが一元管理します
     */
    function onKeyDown(key, shift, process=true){
        switch(key){
        case VK_Z:
            break;
        }
    }

    function onKeyUp(key, shift, process=true){
        switch(key){
        case VK_Z:
            this.togleCrazyMode();
            break;
        case VK_ESCAPE:
            invalidate this;
            break;
        }
    }
    
    //弟子に相談される
    function consult(obj){
        if (obj instanceof "RFGFairy") {
            if (this.isCollision(obj.lay.collisionLayer, this.report.reportLayer.collisionLayer))return true;
        }
    }
    
    //オブジェクト同士の接触判定
    function isCollision(lay1, lay2){
        if( (lay1.boundingLeft < lay2.boundingLeft + lay2.width ) &&
            (lay2.boundingLeft < lay1.boundingLeft + lay1.width ) &&
            (lay1.boundingTop  < lay2.boundingTop  + lay2.height) &&
            (lay2.boundingTop  < lay1.boundingTop  + lay1.height) ) {

            return true;
        }
    }
    
    function finalize(){
        invalidate this.fairyManager;
        invalidate this.fairyUnit;
        invalidate this.frameUnit;
        invalidate this.mainLayer;
        kag.trigger("fairyend");
    }
}
