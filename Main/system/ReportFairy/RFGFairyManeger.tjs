class RFGFairyManeger{    
    var fairy;
    var x,y;            //妖精の初期出現位置
    var width,height;    //ウィンドウのサイズ
    var maxFairy = 20;
    var rand;
    var way;
    var wnd;
    var lay;//FairyUnitLayer
    var owner;//管理者
    
    
    function RFGFairyManeger(wnd,lay, owner){
        this.owner = owner;
        
        this.lay = lay;
        this.wnd = wnd;
        this.width=lay.width;
        this.height=lay.height;
        rand = new Math.RandomGenerator();
        
        this.timer = new Timer(this, "action");//メモリリークの危険性
        this.timer.interval = 1000;
        timer.enabled = true;
        this.fairy=new Array();
        for(var i=0; i<this.maxFairy;i++){
            this.fairy[i]=new RFGFairy(wnd,lay, owner);
        }
    }

    //一定時間ごとに妖精を出現させる
    function action(ev){
        for(var i=0; i<maxFairy; i++){
            if(this.fairy[i].enable==0){
                popPosition();
                invalidate this.fairy[i];
                this.fairy[i]=new RFGFairy(wnd, this.lay, owner);//妖精再作成
                this.fairy[i].lay.setPos(x, y);//レイヤーの座標だけかえてもFairyオブジェクトの座標は変わらない
                this.fairy[i].x = x;//妖精の座標変更
                this.fairy[i].y = y;//妖精の座標変更
                this.fairy[i].lay.visible=true;
                this.fairy[i].setVectForCenter(1.25);//中央方向へ向かうようにする
                this.fairy[i].enable=1;
                break;
            }
        }
    }
    
    //妖精のポップ位置を定める
    function popPosition(){
        way=rand.random32() % 4;//0:上　1:右　2:下　3:左
        switch(way){
        case 0:
            x=(int)(rand.random()*width);
            y=0;
            break;
        case 1:
            x=width - 10;
            y=(int)(rand.random()*height);
            break;
        case 2:
            x=(int)(rand.random()*width);
            y=height - 10;
            break;
        case 3:
            x=0;
            y=(int)(rand.random()*height);
            break;
        }
    }
    
    function finalize(){
        for(var i=0; i<this.maxFairy;i++){
            invalidate this.fairy[i];
        }
    }
}
