/**
 * 物体管理クラス
 * @author gewalt01
 */
class  RFGObjectManager
{
	var objects = [];
	var owner;
	var timer;
	var window;
	var parentLayer;
	
	/**
	 * 
	 * @param	wnd   ウインドウオブジェクト
	 * @param	lay   親レイヤー
	 * @param	owner 管理者
	 */
	function RFGObjectManager(wnd, lay, owner) {
		this.window = wnd;
		this.parentLayer = lay;
		this.owner = owner;
		
		this.timer = new Timer(this, "action");
        this.timer.interval = 1000;
		this.timer.enabled = false;
	}
	
	/**
	 * オブジェクト追加
	 * @param	obj
	 */
	function addObject(obj) {
		this.objects.add(obj);
	}

	/**
	 * オブジェクト破棄
	 * @param	obj 削除対象オブジェクト
	 */
	function purgeObject(obj) {
		this.objects.remove(obj);
		invalidate obj;
	}
	
	/**
	 * 物体の破棄依頼が来たときのイベントハンドラ
	 * @param	obj 自殺志願物体
	 */
	function assistSuicide(obj) {
		//自殺幇助
		this.purgeObject(obj);
	}

    /**
     * 全物体破棄
     */
    function killAll(){
		for (var i = 0; i < this.objects.count; i++)
		{
			this.purgeObject(this.objects[i]);
			i--;//this.purgeObject()によって添え字が1つ詰められるため
		}
    }

    /**
     * 全物体動作可能にする
     */
    function startAll(){
		for (var i = 0; i < this.objects.count; i++)
		{
			this.objects[i].timer.enabled = true;
		}
		
		this.timer.enabled = true;
    }
    
    /**
     * 全物体停止
     */
    function stopAll() {
		for (var i = 0; i < this.objects.count; i++)
		{
			this.objects[i].timer.enabled = false;
		}
		
		this.timer.enabled = false;
    }
	
	function finalize() {
		this.killAll();
	}
}