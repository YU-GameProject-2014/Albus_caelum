/**
 * Layerクラス機能拡張
 * @author gewalt01
 */
class RFGBasicLayer extends Layer{
    
    function RFGBasicLayer(wnd, lay){
        super.Layer(wnd, lay);
    }
    
    /**
     * プライマリレイヤからの左端絶対位置
     */    
    property boundingLeft
    {
        getter()
        {
            return this.boundingParentLeft + this.left;
        }
    }

    /**
     * プライマリレイヤからの上端絶対位置
     */    
    property boundingTop
    {
        getter()
        {
            return this.boundingParentTop + this.top;
        }
    }

    /**
     * 親レイヤのプライマリレイヤからの左端絶対位置
     */    
    property boundingParentLeft
    {
        getter()
        {
            var tmplay  = this.parent;
            var tmpleft = 0;
            while(tmplay != null)
            {
                tmpleft += tmplay.left;
                tmplay = tmplay.parent;
            }

            return tmpleft;
        }
    }

    /**
     * 親レイヤのプライマリレイヤからの上端絶対位置
     */    
    property boundingParentTop
    {
        getter()
        {
            var tmplay  = this.parent;
            var tmptop  = 0;
            while(tmplay != null)
            {
                tmptop += tmplay.top;
                tmplay = tmplay.parent;
            }
            
            return tmptop;
        }
    }

    /**
     * 上下左右中央揃え
     */
    function setPosCenter(){
        this.left = (this.parent.width  - this.width ) / 2; //両端揃え;
        this.top  = (this.parent.height - this.height) / 2; //中央揃え;
    }

	/**
	 * 自身を画像ファイルをパターンにして合成して塗りつぶす
	 * @param	offx   xオフセット
	 * @param	offy   yオフセット
	 * @param   width  幅
	 * @param   height 高さ
	 * @param	imsrc    合成する画像ファイルのパス
	 */
	function operateFillImageRect(offx, offy, width, height, src){
		var img = new global.Layer(this.window, this.window.primaryLayer);
		img.visible = false;
		img.loadImages(src);
		img.setSizeToImageSize();
		this.operateFillRect(offx, offy, width, height, img);
		invalidate img;
	}

	
	/**
	 * 自身を合成先として合成元レイヤをパターンにして合成して塗りつぶす
	 * @param	offx   xオフセット
	 * @param	offy   yオフセット
	 * @param   width  幅
	 * @param   height 高さ
	 * @param	src    合成元レイヤ
	 */
	function operateFillRect(offx, offy, width, height, src){
		for(var i=offx; i<width + offx; i+=src.width)
		{
			for(var j=offy; j<height + offy; j+=src.height)
			{
				this.operateRect(i, j, src, 0, 0, Math.min(src.width, width - i), Math.min(src.height, height - j), omAuto, 255);
			}
		}
	}

	
	/**
	 * finalize
	 */
	function finalize() {
		
	}
}
