class RFGFairy extends RFGObject{
    var x, y;     //座標
    var vx, vy;   //速度ベクトル
    var enable;   //生死
    var layer;      //RFGFairyLayer
    
    function RFGFairy(wnd, lay, owner) {
		super.RFGObject(wnd, lay, owner);
        //this.layer.parentがNULLになる可能性あり
        this.layer = RFGLayerCreator.createFairyLayer(wnd, lay, this);
        this.setVect(0, 0);
        this.enable=0;
        this.timer.interval = 1000/60;
        this.timer.enabled = true;
    }
    
    function onClick(x, y){
        this.layer.opacity = 128;
        this.layer.hitThreshold = 256;
    }
    
    function move(dx, dy){
        this.x += dx;
        this.y += dy;
        this.layer.setPos(this.x, this.y);
        
        //画面からはみ出たら消滅
        if (this.layer.left + this.layer.width < 0 || this.layer.top  + this.layer.height < 0 ||
            this.layer.parent.width  < this.layer.left|| this.layer.parent.height < this.layer.top
        ){
            this.suicide();
        }
        
        if (this.advice()) {
            this.suicide();
        }
    }

    //一定時間ごとに妖精が作動する
    function action(ev){
        if(this.enable) this.move(vx, vy);
    }

    //指導者に指示を仰ぐ
    function advice() {
        return owner.consult(this);
    }

    function setVect(vx, vy){
        this.vx = vx;
        this.vy = vy;
    }

    function setVectForCenter(d){
        var parent_center_pos_x = this.layer.parent.width / 2;
        var parent_center_pos_y = this.layer.parent.height / 2;
        var r = Math.sqrt(Math.pow(parent_center_pos_x - this.x, 2) + Math.pow(parent_center_pos_y - this.y, 2));
        var dx = d * (parent_center_pos_x - this.x) / r;
        var dy = d * (parent_center_pos_y - this.y) / r;
        this.setVect(dx, dy);
    }

    //自決
    function suicide(){
        this.timer.enabled = false;
        this.enable = 0;
        this.layer.visible = false;
    }

    function finalize(){
        super.finalize();
        invalidate this.layer;
    }
}
