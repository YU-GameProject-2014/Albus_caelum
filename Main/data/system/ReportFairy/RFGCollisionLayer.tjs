/**
 * 衝突判定レイヤー(矩形)
 * @author gewalt01
 */
class  RFGCollisionLayer extends RFGBasicLayer
{
	var owner; //管理者 //双方向参照やめるかもしれない
	var areas = new Array(); //衝突判定領域配列[x, y, width, height]
	
	/**
	 * コンストラクタ
	 * @param	wnd   ウインドウオブジェクト
	 * @param	lay   親レイヤ
	 * @param	owner 管理者
	 */
	function RFGCollisionLayer(wnd, lay, owner) {
		super.RFGBasicLayer(wnd, lay);
		this.owner = owner;
		this.visible = false;
	}
	
	/**
	 * 衝突判定領域追加
	 * @param	x
	 * @param	y
	 * @param	width
	 * @param	height
	 */
	function addArea(x, y, width, height)
	{
		var area = % [];
		area["x"]      = x;
		area["y"]      = y;
		area["width"]  = width;
		area["height"] = height;
		this.areas.add(area);
	}
	
	/**
	 * 衝突判定 //まだできてないよ
	 * @param	collay 判定対象となるRFGCollisionLayerオブジェクト
	 */
	function isCollision(collay) {
        for(var i = 0; i < this.areas.count; i++)
        {
            for(var j = 0; j < collay.areas.count; j++)
            {
                 
                //サイズが不正な領域の処理はしない
                if(this.areas[i]["width"] <= 0 || this.areas[i]["height"]  <= 0 || collay.areas[j]["width"]  <= 0 || this.areas[j]["height"]  <= 0) continue;
            
                
                pos = new Array();
                pos.add(%[]);
                pos.add(%[]);
                
                //レイヤーからはみ出してる部分を無視
                pos[0]["left"]   = 0 < this.areas[i]["x"] ?  this.boundingLeft + this.areas[i]["x"] : this.boundingLeft;
                pos[0]["right"]  = this.areas[i]["x"] + this.areas[i]["width"] < this.width ? this.boundingLeft + this.areas[i]["x"] + this.areas[i]["width"] : this.boundingLeft + this.width;
                pos[0]["top"]    = 0 < this.areas[i]["y"] ?  this.boundingTop + this.areas[i]["y"] : this.boundingTop;
                pos[0]["bottom"] = this.areas[i]["y"] + this.areas[i]["height"] < this.height ? this.boundingTop + this.areas[i]["y"] + this.areas[i]["height"] : this.boundingTop + this.height;

                pos[0]["left"]   = 0 < collay.areas[j]["x"] ?  this.boundingLeft + collay.areas[j]["x"] : this.boundingLeft;
                pos[1]["right"]  = collay.areas[j]["x"] + collay.areas[j]["width"] < this.width ? this.boundingLeft + collay.areas[j]["x"] + collay.areas[j]["width"] : this.boundingLeft + this.width;
                pos[2]["top"]    = 0 < collay.areas[j]["y"] ?  this.boundingTop + collay.areas[j]["y"] : this.boundingTop;
                pos[3]["bottom"] = collay.areas[j]["y"] + collay.areas[j]["height"] < this.height ? this.boundingTop + collay.areas[j]["y"] + collay.areas[j]["height"] : this.boundingTop + this.height;

                //衝突判定
                if( (pos[0]["left"] < pos[1]["right"] ) &&
                    (pos[1]["left"] < pos[0]["right"] ) &&
                    (pos[0]["top"]  < pos[1]["bottom"]) &&
                    (pos[1]["top"]  < pos[0]["bottom"]) ) {
    
                    return true;
                }
            }
        }

	}
}