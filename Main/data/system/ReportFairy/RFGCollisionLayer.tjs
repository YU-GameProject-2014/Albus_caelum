/**
 * 衝突判定レイヤー(矩形)
 * @author gewalt01
 */
class  RFGCollisionLayer extends RFGBasicLayer
{
	var owner; //管理者
	var areas = new Array(); //衝突判定領域配列[x, y, width, height]
	
	/**
	 * コンストラクタ
	 * @param	wnd
	 * @param	lay
	 * @param	owner
	 */
	function RFGCollisionLayer(wnd, lay, owner) {
		super.RFGBasicLayer(wnd, lay);
		this.owner = owner;
		this.visible = false;
	}
	
	/**
	 * 衝突判定領域追加
	 * @param	x
	 * @param	y
	 * @param	width
	 * @param	height
	 */
	function addArea(x, y, width, height)
	{
		this.areas.add([x, y, width, height]);
	}
	
	/**
	 * 衝突判定 //まだつくってないよ
	 * @param	collay 判定対象となるRFGCollisionLayerオブジェクト
	 */
	function isCollision(collay) {
        for(var i = 0; i < this.areas.count; i++)
        {
            for(var j = 0; j < collay.areas.count; j++)
            {
                lay1 = obj1.layer.collisionLayers[i];
                lay2 = obj2.layer.collisionLayers[j];
                
                
                //サイズが不正なレイヤーの処理はしない
                if(lay1.width <= 0 || lay1.height <= 0 || lay2.width <= 0 || lay2.height <= 0) continue;
            
                
                pos = new Array();
                pos.add(%[]);
                pos.add(%[]);
                
                //親レイヤーからはみ出してる部分を無視
                pos[0]["left"]   = 0 < lay1.left ? lay1.boundingLeft : lay1.boundingParentLeft;
                pos[0]["right"]  = lay1.left + lay1.width < lay1.parent.width ? lay1.boundingLeft + lay1.width : lay1.boundingParentLeft + lay1.parent.width;
                pos[0]["top"]    = 0 < lay1.top ? lay1.boundingTop : lay1.boundingParentTop;
                pos[0]["bottom"] = lay1.top + lay1.height < lay1.parent.height ? lay1.boundingTop + lay1.height : lay1.boundingParentTop + lay1.parent.height;

                pos[1]["left"]   = 0 < lay2.left ? lay2.boundingLeft : lay2.boundingParentLeft;
                pos[1]["right"]  = lay2.left + lay2.width < lay2.parent.width ? lay2.boundingLeft + lay2.width : lay2.boundingParentLeft + lay2.parent.width;
                pos[1]["top"]    = 0 < lay2.top ? lay2.boundingTop : lay2.boundingParentTop;
                pos[1]["bottom"] = lay2.top + lay2.height < lay2.parent.height ? lay2.boundingTop + lay2.height : lay2.boundingParentTop + lay2.parent.height;

                //衝突判定
                if( (pos[0]["left"] < pos[1]["right"] ) &&
                    (pos[1]["left"] < pos[0]["right"] ) &&
                    (pos[0]["top"]  < pos[1]["bottom"]) &&
                    (pos[1]["top"]  < pos[0]["bottom"]) ) {

    
                    return true;
                }
            }
        }

	}
}