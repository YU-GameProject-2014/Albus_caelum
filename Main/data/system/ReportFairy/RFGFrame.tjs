/**
 * 集中モードの枠となる物体クラス
 * @author gewalt01
 */
class RFGFrame extends RFGObject{

	var _visible = false;
	var blankLayer;
	
	/**
	 * フレームを表示/非表示(変化時トランジションする)
	 */
	property visible
	{
		setter(val) {
	        if (this._visible === true) {
	            this._visible = val;
				this.layer.visible = true;
            	this.blankLayer.visible = false;
				this.blankLayer.stopTransition();
	            this.layer.beginTransition("universal", true, this.blankLayer, % [vague:100, time:250, rule:"rule/rule.png"]);
	        } else {
	            this._visible = val;
				this.layer.visible = false;
				this.blankLayer.visible = true;
				this.layer.stopTransition();
	            this.blankLayer.beginTransition("universal", true, this.layer, % [vague:100, time:500, rule:"rule/rule.png"]);
			}

		}
		
		getter() {
		    return _visible;
		}
		
	}
	
	/**
	 * コンストラクタ
	 * @param	wnd   描画ウインドウオブジェクト
	 * @param	lay   親レイヤー
	 * @param	owner 管理者
	 */
    function RFGFrame(wnd, lay, owner) {
		super.RFGObject(wnd, lay, owner);
        this.layer = RFGLayerCreator.createFrameLayer(wnd, lay);
		this.blankLayer = RFGLayerCreator.createBlankFrameLayer(wnd, lay);
		this.configure();
    } 
	
	/**
	 * 集中モード枠初期化設定
	 */
	function configure() {
		//トランジション設定
		//
		this.layer.onTransitionCompleted = function(){
			this.layer.visible = false;
			this.blankLayer.visible = true;
		} incontextof this;

		this.blankLayer.onTransitionCompleted = function(){
			this.layer.visible=true;
			this.blankLayer.visible=false;
		} incontextof this;
	}

    function finalize(){
        super.finalize();
        invalidate this.layer;
    }
}