/**
 * 妖精管理クラス
 * @author gewalt01
 */
class RFGFairyManager extends RFGObjectManager{    
    var maxFairy = 300;//妖精作成上限
	var pattern; //生成パターン
    
	/**
	 * コンストラクタ
	 * @param	wnd   描画ウインドウオブジェクト
	 * @param	lay   親レイヤー
	 * @param	owner 管理者
	 */
    function RFGFairyManager(wnd, lay, owner) {
		super.RFGObjectManager(wnd, lay, owner);
		
		//妖精の作成はRFGFairyGeneratePatternに委譲
		this.pattern = new RFGFairyGeneratePattern(this);
        
        //this.timer.enabled = true;
    }

	/**
	 * 妖精オブジェクトに関する判断を管理者にゆだねる
	 * @param	obj RFGFairyオブジェクト
	 */
	function consult(obj) {
		//相談を上位オブジェクトにたらいまわし
		return this.owner.consult(obj);
	}

	    /**
     * 全物体動作可能にする
     */
    function startAll(){
		super.startAll();
		this.pattern.timer.enabled = true;
    }
    
    /**
     * 全物体停止
     */
    function stopAll() {
		super.stopAll();
		this.pattern.timer.enabled = false;
    }

	
    
    function finalize() {
		super.finalize();
		invalidate this.pattern;
    }
}

