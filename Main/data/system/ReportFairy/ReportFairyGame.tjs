/**
 * レポートの妖精ゲーム本体
 * @author gewalt01
 */
class ReportFairyGame {
	//Layer
    var mainLayer;
    var reportUnit;
	var doodUnit;
    var fairyUnit;
    var frameUnit;
    var lifebarUnit;
    var scoreUnit;
    
    //RFGObjectManager
	var reportManager;
	var doodManager;
    var fairyManager;
	var frameManager;
	var lifebarManager;
	var scoreManager;
    
	//array
	var managers = [];
	var onKeyDownEvents = %[];
	var onKeyUpEvents = % [];
	
	//bgm
	var bgm;
	
	//被ダメ時効果音
	var sound;

	//集中モード
    var crazy = false;
 
    /**
     * コンストラクタ, 描画レイヤーと物体の作成, キー操作登録等の初期化処理
     * @param	wnd 描画するウインドウオブジェクト
     * @param	lay 親レイヤー
     */
    function ReportFairyGame(wnd, lay){
        this.mainLayer  = RFGLayerCreator.createMainLayer(wnd, lay, this);
        
		this.reportUnit = RFGLayerCreator.createUnitLayer(wnd, this.mainLayer);
        this.doodUnit = RFGLayerCreator.createUnitLayer(wnd, this.mainLayer);
        this.fairyUnit = RFGLayerCreator.createUnitLayer(wnd, this.mainLayer);
		this.frameUnit = RFGLayerCreator.createUnitLayer(wnd, this.mainLayer);
		this.lifebarUnit = RFGLayerCreator.createUnitLayer(wnd, this.mainLayer);
		this.scoreUnit = RFGLayerCreator.createUnitLayer(wnd, this.mainLayer);
        
        this.reportUnit.bringToFront();
		this.doodUnit.bringToFront();
		this.fairyUnit.bringToFront();
        this.frameUnit.bringToFront();
        this.lifebarUnit.bringToFront();
        this.scoreUnit.bringToFront();
        
        this.managers.add(this.fairyManager = new RFGFairyManager(wnd, this.fairyUnit, this));
        this.managers.add(this.frameManager = new RFGFrameManager(wnd, this.frameUnit, this));
        this.managers.add(this.lifebarManager = new RFGLifebarManager(wnd, this.frameUnit, this));
        this.managers.add(this.reportManager = new RFGReportManager(wnd, this.reportUnit, this));
		this.managers.add(this.scoreManager = new RFGScoreManager(wnd, this.scoreUnit, this));
        this.managers.add(this.doodManager = new RFGDoodManager(wnd, this.doodUnit, this, this.reportManager.objects[0]));
		
        this.lifebarManager.objects[0].maxlife = this.lifebarManager.objects[0].life = 10;//初期ライフ
        this.scoreManager.objects[0].score = this.reportManager.objects[0].num = 2;//枚数
	
		//キー入力ハンドラ登録
		this.onKeyDownEvents[VK_X] = function(key) { this.stopAllObjects(); } incontextof this;
		this.onKeyUpEvents[VK_Z] = function(key) { this.togleCrazyMode(); } incontextof this;
		this.onKeyUpEvents[VK_ESCAPE] = function(key) { this.exit(); } incontextof this;
		this.onKeyUpEvents[VK_X] = function(key) { this.startAllObjects(); } incontextof this;
		this.onKeyUpEvents[VK_C] = function(key) { this.fairyManager.killAll(); } incontextof this;
		
		//音声読み込み
		//this.sound = new WaveSoundBuffer(null);
		//this.bgm = new WaveSoundBuffer(null);
		//this.bgm.open("bgm/bgm001.WAV");
		//this.bgm.play();
    }
    
    /**
     * 集中モード切り替え
     */
    function togleCrazyMode(){
        if (this.crazy === true) {
            this.frameManager.objects[0].visible=false;
            this.reportManager.objects[0].speed = 2;
            this.crazy = false;
        } else {
            this.frameManager.objects[0].visible=true;
            this.reportManager.objects[0].speed = 20;
            this.crazy = true;
        }
    }
    
    /*
     * キー操作はReportFairyGameが一元管理します
     */
	/**
	 * キーが押された時の処理
	 * @param	key
	 * @param	shift
	 * @param	process = true
	 */
    function onKeyDown(key, shift, process = true) {
		//登録したキーイベントハンドラを実行
		this.onKeyDownEvents[key] !== void ? this.onKeyDownEvents[key](key) : null;
    }

	/**
	 * キーが離された時の処理
	 * @param	key
	 * @param	shift
	 * @param	process = true
	 */
    function onKeyUp(key, shift, process = true) {
		//登録したキーイベントハンドラを実行
		this.onKeyUpEvents[key] !== void ? this.onKeyUpEvents[key](key) : null;
    }
    
    /**
     * 他オブジェクトからの処理判断依頼
     * @param	obj
     */
    function consult(obj){
        //妖精オブジェクトからの相談
        if (obj instanceof "RFGFairy") {
            //衝突したと指示
			//妖精オブジェクトが攻撃可能か判定
            if (obj.collisionLayer.isCollision(this.reportManager.objects[0].collisionLayer) && obj.atack()) {
                //ライフ計算
                this.lifebarManager.objects[0].life--;
                this.lifebarManager.objects[0].update();
				
				obj.collisionLayer.enable = false;
				
				//this.sound.open("sound/001.wav");
				//this.sound.play();
				
				//落書き
				this.doodManager.objects[0].draw();

                return true;
            }
        }
	}
    
	/**
	 * すべての物体の動作させる
	 */
	function startAllObjects() {
		for (var i = 0; i < this.managers.count; i++ )
		{
			this.managers[i].startAll();
		}
	}

	/**
	 * すべての物体の動作の停止
	 */
   	function stopAllObjects() {
		for (var i = 0; i < this.managers.count; i++ )
		{
			this.managers[i].stopAll();
		}
	}

	/**
	 * レポートが1毎書き終わる
	 */
    function writedReport() {
        this.scoreManager.objects[0].score = --this.reportManager.objects[0].num;
		this.doodManager.objects[0].clear();
    }
	
	/**
	 * レポート完成
	 */
	function onFinishReport() {
		this.stopAllObjects();
		//this.bgm.stop();
		//this.sound.open("sound/005.wav");
		//this.sound.play();
		System.inform("complite");

		this.exit();
	}

	/**
	 * ライフ0
	 */
	function onNoLife() {
		this.stopAllObjects();
		//this.bgm.stop();
		//this.sound.open("sound/003.wav");
		//this.sound.play();
		System.inform("failed");
		this.exit();
	}

	
	/**
	 * ゲーム終了
	 */
	function exit() {
		this.reportManager.stopAll();
		this.fairyManager.stopAll();
		this.frameManager.stopAll();
		this.lifebarManager.stopAll();
		this.scoreManager.stopAll();
		this.mainLayer.visible = false;
		
        kag.trigger("fairyend");
	}
    
	/**
	 * finalize
	 */
    function finalize(){
		invalidate this.fairyManager;
		invalidate this.frameManager;
		invalidate this.lifebarManager;
		invalidate this.reportManager;
		invalidate this.scoreManager;
        invalidate this.reportUnit;
        invalidate this.doodUnit;
        invalidate this.fairyUnit;
        invalidate this.frameUnit;
        invalidate this.lifebarUnit;
        invalidate this.scoreUnit;		
        invalidate this.mainLayer;
    }
}
