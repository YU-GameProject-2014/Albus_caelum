/**
 * レイヤー作成ファクトリメソッド群
 */
class RFGLayerCreator {

	/**
	 * レポートの妖精ゲームのメインレイヤー
	 * @param	wnd   描画ウインドウオブジェクト
	 * @param	lay   親レイヤー
	 * @param	owner 管理者
	 */
    function createMainLayer(wnd, lay, owner){
        var m_lay = new RFGLayer(wnd, lay);
        m_lay.owner = owner;
        m_lay.width = lay.width;
        m_lay.height = lay.height;
        m_lay.focusable = true;
        m_lay.fillRect(0, 0, m_lay.width, m_lay.height, 0xFF7F7F7F);
        m_lay.visible=true;
        m_lay.focus();
        
        return m_lay;
    }

	/**
	 * レポート層, 妖精層, フレーム層などに分離するための層レイヤー
	 * @param	wnd
	 * @param	lay
	 */
    function createUnitLayer(wnd, lay){
        var unit_lay;
        unit_lay = new RFGLayer(wnd, lay);
        unit_lay.width = lay.width;
        unit_lay.height = lay.height;
        unit_lay.visible = true;

        return unit_lay;
    }

	/**
	 * 妖精レイヤー作成
	 * @param	wnd   描画ウインドウオブジェクト
	 * @param	lay   親レイヤー
	 * @param	owner 管理者
	 */
    function createFairyLayer(wnd, lay, owner){
        var f_lay = new RFGLayer(wnd, lay);
        f_lay.owner = owner;//メモリリークの危険性
        f_lay.loadImages("image/Fairy.png");
        f_lay.setSizeToImageSize();
        
        //f_lay.collisionLayers.add(RFGLayerCreator.createCollisionLayer(wnd, f_lay, 0,  0, f_lay.width, 20 ));
        //f_lay.collisionLayers.add(RFGLayerCreator.createCollisionLayer(wnd, f_lay, 0, 30, f_lay.width, 100));
        
        
        return f_lay;
    }

	/**
	 * 妖精衝突判定レイヤー作成
	 * @param	wnd   描画ウインドウオブジェクト
	 * @param	lay   親レイヤー
	 * @param	owner 管理者
	 */
    function createFairyCollisionLayer(wnd, lay, owner){
        var fc_lay = new RFGCollisionLayer(wnd, lay, owner);
		fc_lay.visible = false;
        fc_lay.owner = owner;//メモリリークの危険性
        fc_lay.width = lay.width;
        fc_lay.height = lay.height;
		
		fc_lay.addArea(0,   0, fc_lay.width, 20);
		fc_lay.addArea(0,  30, fc_lay.width, 100);
		
		fc_lay.enable = true;
		
        return fc_lay;
    }
	
	
	/**
	 * 集中枠レイヤー作成
	 * @param	wnd   描画ウインドウオブジェクト
	 * @param	lay   親レイヤー
	 */
    function createFrameLayer(wnd, lay){
        var f_lay = new RFGLayer(wnd, lay);
        f_lay.width=wnd.innerWidth;
        f_lay.height=wnd.innerHeight;
        f_lay.loadImages("image/frame.png");
        f_lay.setSizeToImageSize();
        f_lay.hitThreshold = 0;
        f_lay.visible=false;
        
        return f_lay;
    }

	/**
	 * 集中枠空白レイヤー作成(トランジション処理用)
	 * @param	wnd   描画ウインドウオブジェクト
	 * @param	lay   親レイヤー
	 */

    function createBlankFrameLayer(wnd, lay){
        var blank_lay = RFGLayerCreator.createFrameLayer(wnd, lay);
		blank_lay.colorRect(0, 0, blank_lay.width, blank_lay.height, 0x000000, -255);
		
        return blank_lay;
    }

    
	/**
	 * レポートレイヤー作成
	 * @param	wnd   描画ウインドウオブジェクト
	 * @param	lay   親レイヤー
	 */
    function createReportLayer(wnd, lay){
        var r_lay = new RFGReportLayer(wnd, lay);
        r_lay.setPosCenter();

        //r_lay.collisionLayers.add(RFGLayerCreator.createCollisionLayer(wnd, r_lay, 0, 100, r_lay.width, 50));

        
        return r_lay;
    }

	/**
	 * レポート衝突判定レイヤー作成
	 * @param	wnd   描画ウインドウオブジェクト
	 * @param	lay   親レイヤー
	 * @param	owner 管理者
	 */
    function createReportCollisionLayer(wnd, lay, owner){
        var rc_lay = new RFGCollisionLayer(wnd, lay, void);
		rc_lay.visible = false;
        rc_lay.owner = void;//メモリリークの危険性
        rc_lay.width = lay.width;
        rc_lay.height = lay.height;
		
		rc_lay.addArea(0, 150, rc_lay.width, 50);
		rc_lay.enable = true;
		
        return rc_lay;
    }

	
	/**
	 * レポートのライフバーレイヤー作成
	 * @param	wnd   描画ウインドウオブジェクト
	 * @param	lay   親レイヤー
	 */
    function createLifebarLayer(wnd, lay){
        var l_lay = new RFGLayer(wnd, lay);
        l_lay.width = 400;
        l_lay.height = 20;
        l_lay.setPosCenter();
        l_lay.top = l_lay.parent.height - 2 * l_lay.height;
        l_lay.hitThreshold = 256;
        l_lay.visible = true;
        
        return l_lay;
    }

	/**
	 * 残枚数レイヤー作成
	 * @param	wnd   描画ウインドウオブジェクト
	 * @param	lay   親レイヤー
	 */
    function createScoreLayer(wnd, lay){
        var s_lay = new RFGLayer(wnd, lay);
        s_lay.width = lay.width;
        s_lay.height = 40;
        s_lay.top = 0;
        s_lay.left = 0;
        
        s_lay.font.height = 20;
        
        s_lay.hitThreshold = 256;
        s_lay.visible = true;
        
        return s_lay;
    }

	/**
	 * 衝突判定レイヤー作成
	 * @param	wnd   描画ウインドウオブジェクト
	 * @param	lay   親レイヤー
	 * @param	x      xオフセット
	 * @param	y      yオフセット
	 * @param	width  幅
	 * @param	height 高さ
	 */
    function createCollisionLayer(wnd, lay, x, y, width, height){
        var col_lay = new RFGLayer(wnd, lay);
        col_lay.left = x;
        col_lay.top = y;
        col_lay.width  = width;
        col_lay.height = height;
        col_lay.fillRect(0, 0, col_lay.width, col_lay.height, 0x7F00FF00);
        col_lay.bringToFront();
        col_lay.visible = true;
        col_lay.hitThreshold = 256;

        return col_lay;
    }
}
